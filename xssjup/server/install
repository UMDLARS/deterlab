#!/bin/bash

# Create pathnames.
export RESOURCES="/tmp/server/resources"
export CHECKER="/home/.checker"
export TEMP_CHECKER="/home/.checker/temp"

# The username is required for this lab.
export USER=USERNAME_GOES_HERE

export USER_HOME="/home/$USER"
export NVM_INSTALL_SCRIPT="/home/.checker/install_nvm.sh"

# Go into the server directory, where all files are stored.
cd /tmp/server

# Install the required libraries.
apt-get update
apt-get install -y mariadb-server mariadb-client apache2 libcurl3-dev php7.4 php7.4-dev php7.4-http php7.4-mysql php7.4-curl libapache2-mod-php7.4 php7.4-cli libcurl3-dev python3-pip wget xdg-utils libgbm1 libxshmfence1 libnss3 libcups2 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 libpangocairo-1.0-0 libpango-1.0-0 libcairo2 libatspi2.0-0 libgtk-3-0

# Additionally, download a couple pip libraries for the checker scripts.
pip install mysql-connector-python requests

# Move the checker scripts over.
mkdir -p $CHECKER
mkdir -p $TEMP_CHECKER

# Transfer the resources over.
cp $RESOURCES/checker/* $CHECKER
chmod +x $CHECKER/reset.sh

# Copy the install_nvm.sh script to the checker directory
cp $RESOURCES/install_nvm.sh $CHECKER
chmod +x $NVM_INSTALL_SCRIPT

# Move the save/load scripts.
cp $RESOURCES/*xss.sh $CHECKER

# Give ownership to the students so that the checker will work.
chown -R $USER:$USER $CHECKER

# Run the install_nvm.sh script as the user
sudo -H -u $USER bash $NVM_INSTALL_SCRIPT

# Create the responses directory.
mkdir -p /home/.checker/responses
chmod a+w /home/.checker/responses

# Remove the SQLi password.
mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '';"

# Show PHP errors on the screen.
sed -i 's/display_errors = Off/display_errors = On/' /etc/php/7.4/apache2/php.ini

# Reset apache2 to reflect changes.
systemctl restart apache2

# Now, navigate into the web_files folder to distribute everything properly.
pushd $RESOURCES/web_files

# Add the two databases required for the lab.
mysql -uroot < xss.sql

# Insert the two users for the XSS table. Create random authentication tokens.
UMDSEC_AUTH=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32; echo)
VICTIM_AUTH=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32; echo)
mysql -u root -e "UPDATE xss.users SET auth = '$UMDSEC_AUTH' WHERE username = 'umdsec';"
mysql -u root -e "UPDATE xss.users SET auth = '$VICTIM_AUTH' WHERE username = 'hacker';"

# Creating the notes. Need random 16 digit number for the credit card.
CARD=$(tr -dc 0-9 </dev/urandom | head -c 16)

# Now, the notes.
mysql -u root -e "INSERT INTO xss.notes (username, note) VALUES ('umdsec', 'Wow, this website is insecure!');"
mysql -u root -e "INSERT INTO xss.notes (username, note) VALUES ('hacker', 'Pay bill on Tuesday with this card: $CARD');"
mysql -u root -e "INSERT INTO xss.notes (username, note) VALUES ('hacker', 'Keep 914 dollars in the bank at FCCU for the tax return this season.');"
mysql -u root -e "INSERT INTO xss.notes (username, note) VALUES ('hacker', 'Gift ideas for Max: New laptop, coffee mug, or a winter jacket?');"

# Transfer all forum source code.
cp -r forum/* /var/www/html

# Transfer the xss_practice.php file.
cp xss_practice.php /var/www/html

# Give write perms to sanitize.php, since it's needed for the checker script.
chmod a+w /var/www/html/sanitize.php

# Change ownership for the /var/www/html files. This was in the old install script, so I'm leaving it in.
chown root:www-data /var/www/html/*
chown root:www-data /var/www/html/images/*

# section_2.js needs an authentication token updated. This will look weird, because it's in an indented line.
sed -i "s|http://10.0.1.1/xss_practice.php?auth=XXX|http://10.0.1.1/xss_practice.php?auth=$VICTIM_AUTH|" /home/.checker/section_2.py

# section_2.js need their authentication tokens updated.
sed -i "s|const umdsec_url = \"http://10.0.1.1/xss_practice.php?auth=XXX\";|const umdsec_url = \"http://10.0.1.1/xss_practice.php?auth=$UMDSEC_AUTH\";|" /home/.checker/section_2.js

sed -i "s|const victim_url = \"http://10.0.1.1/xss_practice.php?auth=XXX\";|const victim_url = \"http://10.0.1.1/xss_practice.php?auth=$VICTIM_AUTH\";|" /home/.checker/section_2.js

# Clean up temporary directory
# rm -rf $TEMP_CHECKER

rm -rf /home/.checker/temp

# All done. Perform cleanup.
popd
rm -rf *
